{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cl\\xE9ment\\\\OneDrive\\\\Documents\\\\Scoreboard\\\\ccoreboard\\\\src\\\\pages\\\\SorarePlayer.js\";\nimport React, { useEffect, useState } from 'react';\nimport bcrypt from \"bcryptjs\";\nimport axios from 'axios';\nimport { useMutation, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOGIN_MUTATION = gql`\nmutation SignInMutation($input: signInInput!) {\n    signIn(input: $input) {\n      currentUser {\n        slug\n        jwtToken(aud: \"<YourAud>\") {\n          token\n          expiredAt\n        }\n      }\n      errors {\n        message\n      }\n    }\n  }\n  \n`;\nconst ADD_TODO = gql`\n  mutation AddTodo($text: String!) {\n    addTodo(text: $text) {\n      id\n      text\n    }\n  }\n`;\nconst slug = \"soraredata\";\n\nconst SorarePlayer = () => {\n  var _s = $RefreshSig$();\n\n  /*const [hashed,setHashed]=useState();\r\n  useEffect (() => {\r\n      axios.get(`http://localhost:8080/getHashedPassword`)\r\n      .then(res => {\r\n          setHashed(res.data.salt)\r\n      })\r\n  },[])\r\n  const [login] = useMutation(LOGIN_MUTATION, {\r\n      input: {\r\n        email: \"clement.massee@gmail.com\",\r\n        password: bcrypt.hashSync(\"ClementEric2811\",hashed)\r\n      },\r\n      onCompleted: ({ login }) => {\r\n        console.log(login)\r\n      }})\r\n  //const hashedPassword = bcrypt.hashSync(\"ClementEric2811\", salt);\r\n  return(\r\n      <div>\r\n          <h1>{hashed}</h1>\r\n      </div>\r\n  );*/\n  function AddTodo() {\n    _s();\n\n    let input;\n    const [addTodo, {\n      data,\n      loading,\n      error\n    }] = useMutation(ADD_TODO);\n    if (loading) return 'Submitting...';\n    if (error) return `Submission error! ${error.message}`;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: e => {\n          e.preventDefault();\n          addTodo({\n            variables: {\n              text: input.value\n            }\n          });\n          input.value = '';\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: node => {\n            input = node;\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Add Todo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this);\n  }\n\n  _s(AddTodo, \"N4uWRFCu36hdCMf9jL6d4nj2Sd4=\", false, function () {\n    return [useMutation];\n  });\n};\n\n_c = SorarePlayer;\nexport default SorarePlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SorarePlayer\");","map":{"version":3,"sources":["C:/Users/Cl√©ment/OneDrive/Documents/Scoreboard/ccoreboard/src/pages/SorarePlayer.js"],"names":["React","useEffect","useState","bcrypt","axios","useMutation","gql","LOGIN_MUTATION","ADD_TODO","slug","SorarePlayer","AddTodo","input","addTodo","data","loading","error","message","e","preventDefault","variables","text","value","node"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,GAAtB,QAAiC,gBAAjC;;AAEA,MAAMC,cAAc,GAAGD,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBA;AAkBA,MAAME,QAAQ,GAAGF,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,CAPA;AASA,MAAMG,IAAI,GAAG,YAAb;;AACA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,WAASC,OAAT,GAAmB;AAAA;;AACjB,QAAIC,KAAJ;AACA,UAAM,CAACC,OAAD,EAAU;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,KAAV,IAAsCX,WAAW,CAACG,QAAD,CAAvD;AAEA,QAAIO,OAAJ,EAAa,OAAO,eAAP;AACb,QAAIC,KAAJ,EAAW,OAAQ,qBAAoBA,KAAK,CAACC,OAAQ,EAA1C;AAEX,wBACE;AAAA,6BACE;AACE,QAAA,QAAQ,EAAEC,CAAC,IAAI;AACbA,UAAAA,CAAC,CAACC,cAAF;AACAN,UAAAA,OAAO,CAAC;AAAEO,YAAAA,SAAS,EAAE;AAAEC,cAAAA,IAAI,EAAET,KAAK,CAACU;AAAd;AAAb,WAAD,CAAP;AACAV,UAAAA,KAAK,CAACU,KAAN,GAAc,EAAd;AACD,SALH;AAAA,gCAOE;AACE,UAAA,GAAG,EAAEC,IAAI,IAAI;AACXX,YAAAA,KAAK,GAAGW,IAAR;AACD;AAHH;AAAA;AAAA;AAAA;AAAA,gBAPF,eAYE;AAAQ,UAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAZF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAkBD;;AAhDsB,KAuBdZ,OAvBc;AAAA,YAyBuBN,WAzBvB;AAAA;AAiD1B,CAjDD;;KAAMK,Y;AAmDN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport bcrypt from \"bcryptjs\";\r\nimport axios from 'axios';\r\nimport { useMutation, gql } from '@apollo/client';\r\n\r\nconst LOGIN_MUTATION = gql`\r\nmutation SignInMutation($input: signInInput!) {\r\n    signIn(input: $input) {\r\n      currentUser {\r\n        slug\r\n        jwtToken(aud: \"<YourAud>\") {\r\n          token\r\n          expiredAt\r\n        }\r\n      }\r\n      errors {\r\n        message\r\n      }\r\n    }\r\n  }\r\n  \r\n`;\r\n\r\nconst ADD_TODO = gql`\r\n  mutation AddTodo($text: String!) {\r\n    addTodo(text: $text) {\r\n      id\r\n      text\r\n    }\r\n  }\r\n`;\r\n\r\nconst slug = \"soraredata\";\r\nconst SorarePlayer = () => {\r\n\r\n    /*const [hashed,setHashed]=useState();\r\n    useEffect (() => {\r\n        axios.get(`http://localhost:8080/getHashedPassword`)\r\n        .then(res => {\r\n            setHashed(res.data.salt)\r\n        })\r\n    },[])\r\n    const [login] = useMutation(LOGIN_MUTATION, {\r\n        input: {\r\n          email: \"clement.massee@gmail.com\",\r\n          password: bcrypt.hashSync(\"ClementEric2811\",hashed)\r\n        },\r\n        onCompleted: ({ login }) => {\r\n          console.log(login)\r\n        }})\r\n    //const hashedPassword = bcrypt.hashSync(\"ClementEric2811\", salt);\r\n    return(\r\n        <div>\r\n            <h1>{hashed}</h1>\r\n        </div>\r\n    );*/\r\n    function AddTodo() {\r\n      let input;\r\n      const [addTodo, { data, loading, error }] = useMutation(ADD_TODO);\r\n    \r\n      if (loading) return 'Submitting...';\r\n      if (error) return `Submission error! ${error.message}`;\r\n    \r\n      return (\r\n        <div>\r\n          <form\r\n            onSubmit={e => {\r\n              e.preventDefault();\r\n              addTodo({ variables: { text: input.value } });\r\n              input.value = '';\r\n            }}\r\n          >\r\n            <input\r\n              ref={node => {\r\n                input = node;\r\n              }}\r\n            />\r\n            <button type=\"submit\">Add Todo</button>\r\n          </form>\r\n        </div>\r\n      );\r\n    }\r\n}\r\n\r\nexport default SorarePlayer;"]},"metadata":{},"sourceType":"module"}