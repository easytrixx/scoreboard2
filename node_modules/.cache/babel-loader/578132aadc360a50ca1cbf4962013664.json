{"ast":null,"code":"import _slicedToArray from\"C:/Users/Cl\\xE9ment/OneDrive/Documents/Scoreboard/ccoreboard/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _taggedTemplateLiteral from\"C:/Users/Cl\\xE9ment/OneDrive/Documents/Scoreboard/ccoreboard/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2;import React,{useEffect,useState}from'react';import bcrypt from\"bcryptjs\";import axios from'axios';import{useMutation,gql}from'@apollo/client';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var LOGIN_MUTATION=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\nmutation SignInMutation($input: signInInput!) {\\n    signIn(input: $input) {\\n      currentUser {\\n        slug\\n        jwtToken(aud: \\\"<YourAud>\\\") {\\n          token\\n          expiredAt\\n        }\\n      }\\n      errors {\\n        message\\n      }\\n    }\\n  }\\n  \\n\"])));var ADD_TODO=gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  mutation AddTodo($text: String!) {\\n    addTodo(text: $text) {\\n      id\\n      text\\n    }\\n  }\\n\"])));var slug=\"soraredata\";var SorarePlayer=function SorarePlayer(){/*const [hashed,setHashed]=useState();\r\n    useEffect (() => {\r\n        axios.get(`http://localhost:8080/getHashedPassword`)\r\n        .then(res => {\r\n            setHashed(res.data.salt)\r\n        })\r\n    },[])\r\n    const [login] = useMutation(LOGIN_MUTATION, {\r\n        input: {\r\n          email: \"clement.massee@gmail.com\",\r\n          password: bcrypt.hashSync(\"ClementEric2811\",hashed)\r\n        },\r\n        onCompleted: ({ login }) => {\r\n          console.log(login)\r\n        }})\r\n    //const hashedPassword = bcrypt.hashSync(\"ClementEric2811\", salt);\r\n    return(\r\n        <div>\r\n            <h1>{hashed}</h1>\r\n        </div>\r\n    );*/var input;var _useMutation=useMutation(ADD_TODO),_useMutation2=_slicedToArray(_useMutation,2),addTodo=_useMutation2[0],_useMutation2$=_useMutation2[1],data=_useMutation2$.data,loading=_useMutation2$.loading,error=_useMutation2$.error;if(loading)return'Submitting...';if(error)return\"Submission error! \".concat(error.message);return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(\"form\",{onSubmit:function onSubmit(e){e.preventDefault();addTodo({variables:{text:input.value}});input.value='';},children:[/*#__PURE__*/_jsx(\"input\",{ref:function ref(node){input=node;}}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Add Todo\"})]})});};export default SorarePlayer;","map":{"version":3,"sources":["C:/Users/Cl√©ment/OneDrive/Documents/Scoreboard/ccoreboard/src/pages/SorarePlayer.js"],"names":["React","useEffect","useState","bcrypt","axios","useMutation","gql","LOGIN_MUTATION","ADD_TODO","slug","SorarePlayer","input","addTodo","data","loading","error","message","e","preventDefault","variables","text","value","node"],"mappings":"yVAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,CAA2BC,QAA3B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,WAAT,CAAsBC,GAAtB,KAAiC,gBAAjC,C,wFAEA,GAAMC,CAAAA,cAAc,CAAGD,GAAH,gVAApB,CAkBA,GAAME,CAAAA,QAAQ,CAAGF,GAAH,yKAAd,CASA,GAAMG,CAAAA,IAAI,CAAG,YAAb,CACA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAM,CAEvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QACM,GAAIC,CAAAA,KAAJ,CACA,iBAA4CN,WAAW,CAACG,QAAD,CAAvD,8CAAOI,OAAP,kDAAkBC,IAAlB,gBAAkBA,IAAlB,CAAwBC,OAAxB,gBAAwBA,OAAxB,CAAiCC,KAAjC,gBAAiCA,KAAjC,CAEA,GAAID,OAAJ,CAAa,MAAO,eAAP,CACb,GAAIC,KAAJ,CAAW,kCAA4BA,KAAK,CAACC,OAAlC,EAEX,mBACE,kCACE,cACE,QAAQ,CAAE,kBAAAC,CAAC,CAAI,CACbA,CAAC,CAACC,cAAF,GACAN,OAAO,CAAC,CAAEO,SAAS,CAAE,CAAEC,IAAI,CAAET,KAAK,CAACU,KAAd,CAAb,CAAD,CAAP,CACAV,KAAK,CAACU,KAAN,CAAc,EAAd,CACD,CALH,wBAOE,cACE,GAAG,CAAE,aAAAC,IAAI,CAAI,CACXX,KAAK,CAAGW,IAAR,CACD,CAHH,EAPF,cAYE,eAAQ,IAAI,CAAC,QAAb,sBAZF,GADF,EADF,CAkBL,CA/CD,CAiDA,cAAeZ,CAAAA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport bcrypt from \"bcryptjs\";\r\nimport axios from 'axios';\r\nimport { useMutation, gql } from '@apollo/client';\r\n\r\nconst LOGIN_MUTATION = gql`\r\nmutation SignInMutation($input: signInInput!) {\r\n    signIn(input: $input) {\r\n      currentUser {\r\n        slug\r\n        jwtToken(aud: \"<YourAud>\") {\r\n          token\r\n          expiredAt\r\n        }\r\n      }\r\n      errors {\r\n        message\r\n      }\r\n    }\r\n  }\r\n  \r\n`;\r\n\r\nconst ADD_TODO = gql`\r\n  mutation AddTodo($text: String!) {\r\n    addTodo(text: $text) {\r\n      id\r\n      text\r\n    }\r\n  }\r\n`;\r\n\r\nconst slug = \"soraredata\";\r\nconst SorarePlayer = () => {\r\n\r\n    /*const [hashed,setHashed]=useState();\r\n    useEffect (() => {\r\n        axios.get(`http://localhost:8080/getHashedPassword`)\r\n        .then(res => {\r\n            setHashed(res.data.salt)\r\n        })\r\n    },[])\r\n    const [login] = useMutation(LOGIN_MUTATION, {\r\n        input: {\r\n          email: \"clement.massee@gmail.com\",\r\n          password: bcrypt.hashSync(\"ClementEric2811\",hashed)\r\n        },\r\n        onCompleted: ({ login }) => {\r\n          console.log(login)\r\n        }})\r\n    //const hashedPassword = bcrypt.hashSync(\"ClementEric2811\", salt);\r\n    return(\r\n        <div>\r\n            <h1>{hashed}</h1>\r\n        </div>\r\n    );*/\r\n      let input;\r\n      const [addTodo, { data, loading, error }] = useMutation(ADD_TODO);\r\n    \r\n      if (loading) return 'Submitting...';\r\n      if (error) return `Submission error! ${error.message}`;\r\n    \r\n      return (\r\n        <div>\r\n          <form\r\n            onSubmit={e => {\r\n              e.preventDefault();\r\n              addTodo({ variables: { text: input.value } });\r\n              input.value = '';\r\n            }}\r\n          >\r\n            <input\r\n              ref={node => {\r\n                input = node;\r\n              }}\r\n            />\r\n            <button type=\"submit\">Add Todo</button>\r\n          </form>\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default SorarePlayer;"]},"metadata":{},"sourceType":"module"}