{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Cl\\xE9ment\\\\OneDrive\\\\Documents\\\\Scoreboard\\\\ccoreboard\\\\src\\\\pages\\\\SorarePlayer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport bcrypt from \"bcryptjs\";\nimport axios from 'axios';\nimport { useMutation, gql } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LOGIN_MUTATION = gql`\nmutation SignInMutation($input: signInInput!) {\n    signIn(input: $input) {\n      currentUser {\n        slug\n        jwtToken(aud: \"<YourAud>\") {\n          token\n          expiredAt\n        }\n      }\n      errors {\n        message\n      }\n    }\n  }\n  \n`;\nconst slug = \"soraredata\";\n\nconst SorarePlayer = () => {\n  _s();\n\n  const [hashed, setHashed] = useState();\n  useEffect(() => {\n    axios.get(`http://localhost:8080/getHashedPassword`).then(res => {\n      setHashed(res.data.salt);\n    });\n  }, []);\n  const [login] = useMutation(LOGIN_MUTATION, {\n    input: {\n      email: \"clement.massee@gmail.com\",\n      password: bcrypt.hashSync(\"ClementEric2811\", hashed)\n    },\n    onCompleted: _ref => {\n      let {\n        login\n      } = _ref;\n      console.log(login);\n    }\n  }); //const hashedPassword = bcrypt.hashSync(\"ClementEric2811\", salt);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: hashed\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(SorarePlayer, \"qhn8ZdYBBEKxvO22HjVi11S7aX4=\", false, function () {\n  return [useMutation];\n});\n\n_c = SorarePlayer;\nexport default SorarePlayer;\n\nvar _c;\n\n$RefreshReg$(_c, \"SorarePlayer\");","map":{"version":3,"sources":["C:/Users/Cl√©ment/OneDrive/Documents/Scoreboard/ccoreboard/src/pages/SorarePlayer.js"],"names":["React","useEffect","useState","bcrypt","axios","useMutation","gql","LOGIN_MUTATION","slug","SorarePlayer","hashed","setHashed","get","then","res","data","salt","login","input","email","password","hashSync","onCompleted","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,EAAsBC,GAAtB,QAAiC,gBAAjC;;AAEA,MAAMC,cAAc,GAAGD,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAhBA;AAkBA,MAAME,IAAI,GAAG,YAAb;;AACA,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAEvB,QAAM,CAACC,MAAD,EAAQC,SAAR,IAAmBT,QAAQ,EAAjC;AACAD,EAAAA,SAAS,CAAE,MAAM;AACbG,IAAAA,KAAK,CAACQ,GAAN,CAAW,yCAAX,EACCC,IADD,CACMC,GAAG,IAAI;AACTH,MAAAA,SAAS,CAACG,GAAG,CAACC,IAAJ,CAASC,IAAV,CAAT;AACH,KAHD;AAIH,GALQ,EAKP,EALO,CAAT;AAMA,QAAM,CAACC,KAAD,IAAUZ,WAAW,CAACE,cAAD,EAAiB;AACxCW,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,0BADF;AAELC,MAAAA,QAAQ,EAAEjB,MAAM,CAACkB,QAAP,CAAgB,iBAAhB,EAAkCX,MAAlC;AAFL,KADiC;AAKxCY,IAAAA,WAAW,EAAE,QAAe;AAAA,UAAd;AAAEL,QAAAA;AAAF,OAAc;AAC1BM,MAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACD;AAPuC,GAAjB,CAA3B,CATuB,CAiBvB;;AACA,sBACI;AAAA,2BACI;AAAA,gBAAKP;AAAL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAvBD;;GAAMD,Y;UAScJ,W;;;KATdI,Y;AAyBN,eAAeA,YAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport bcrypt from \"bcryptjs\";\r\nimport axios from 'axios';\r\nimport { useMutation, gql } from '@apollo/client';\r\n\r\nconst LOGIN_MUTATION = gql`\r\nmutation SignInMutation($input: signInInput!) {\r\n    signIn(input: $input) {\r\n      currentUser {\r\n        slug\r\n        jwtToken(aud: \"<YourAud>\") {\r\n          token\r\n          expiredAt\r\n        }\r\n      }\r\n      errors {\r\n        message\r\n      }\r\n    }\r\n  }\r\n  \r\n`;\r\n\r\nconst slug = \"soraredata\";\r\nconst SorarePlayer = () => {\r\n\r\n    const [hashed,setHashed]=useState();\r\n    useEffect (() => {\r\n        axios.get(`http://localhost:8080/getHashedPassword`)\r\n        .then(res => {\r\n            setHashed(res.data.salt)\r\n        })\r\n    },[])\r\n    const [login] = useMutation(LOGIN_MUTATION, {\r\n        input: {\r\n          email: \"clement.massee@gmail.com\",\r\n          password: bcrypt.hashSync(\"ClementEric2811\",hashed)\r\n        },\r\n        onCompleted: ({ login }) => {\r\n          console.log(login)\r\n        }})\r\n    //const hashedPassword = bcrypt.hashSync(\"ClementEric2811\", salt);\r\n    return(\r\n        <div>\r\n            <h1>{hashed}</h1>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SorarePlayer;"]},"metadata":{},"sourceType":"module"}